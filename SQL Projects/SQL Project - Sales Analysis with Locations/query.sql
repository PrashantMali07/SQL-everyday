-- SQL Case Study - 1

/*

Problem Statement:
You are a database administrator. You want to use the data to answer a few questions about your customers, 
especially about the sales and profit coming from different states, money spent in marketing and various 
other factors such as COGS (Cost of Goods Sold), budget profit etc. You plan on using these insights to help
find out which items are being sold the most. You have been provided with the sample of the overall customer 
data due to privacy issues. But you hope that these samples are enough for you to write fully functioning SQL 
queries to help answer the questions.

Dataset:

	The 3 key datasets for this case study:

		a. FactTable: The Fact Table has 14 columns mentioned below and 4200
		rows. Date, ProductID, Profit, Sales, Margin, COGS, Total Expenses,
		Marketing, Inventory, Budget Profit, Budget COGS, Budget Margin, Budget 
		Sales, and Area Code
		
		Note: COGS stands for Cost of Goods Sold

		b. ProductTable: The ProductTable has four columns named Product Type,
		Product, ProductID, and Type. It has 13 rows which can be broken down
		into further details to retrieve the information mentioned in theFactTable.

		c. LocationTable: Finally, the LocationTable has 156 rows and follows a
		similar approach to ProductTable. It has four columns named Area Code,
		State, Market, and Market Size.

Tasks to be performed:

	1. Display the number of states present in the LocationTable. 
	2. How many products are of regular type?
	3. How much spending has been done on marketing of product ID 1?
	4. What is the minimum sales of a product?
	5. Display the max Cost of Good Sold (COGS). 
	6. Display the details of the product where product type is coffee. 
	7. Display the details where total expenses are greater than 40. 8. What is the average sales in area code 719?
	9. Find out the total profit generated by Colorado state.
	10. Display the average inventory for each product ID.
	11. Display state in a sequential order in a Location Table. 
	12. Display the average budget of the Product where the average budget margin should be greater than 100. 
	13. What is the total sales done on date 2010-01-01?
	14. Display the average total expense of each product ID on an individual date. 
	15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code. 
	16. Display the rank without any gap to show the sales wise rank. 
	17. Find the state wise profit and sales. 
	18. Find the state wise profit and sales along with the productname. 
	19. If there is an increase in sales of 5%, calculate the increasedsales. 
	20. Find the maximum profit along with the product ID and producttype. 
	21. Create a stored procedure to fetch the result according to the product typefrom Product Table. 
	22. Write a query by creating a condition in which if the total expenses is lessthan60 then it is a profit or else loss. 
	23. Give the total weekly sales value with the date and product IDdetails. Useroll-up to pull the data in hierarchical order. 
	24. Apply union and intersection operator on the tables which consist of attribute area code. 
	25. Create a user-defined function for the product table to fetch a particular product type based upon the userâ€™s preference. 
	26. Change the product type from coffee to tea where product IDis 1 andundoit. 
	27. Display the date, product ID and sales where total expenses are between 100 to 200. 
	28. Delete the records in the Product Table for regular type. 
	29. Display the ASCII value of the fifth character from the columnProduct.

*/

-- creating a database
CREATE DATABASE case_study1_db;

-- creating tables
CREATE TABLE product
(
	ProductId SERIAL,
	ProductType TEXT NULL,
	ProductName TEXT NULL,
	UsageType TEXT NULL,
	CONSTRAINT id_pkey PRIMARY KEY (ProductId) 
);

CREATE TABLE locations
(
	AreaCode INT,
	StatesName VARCHAR(30),
	MarketRegion VARCHAR(10),
	MarketSize VARCHAR(20),
	CONSTRAINT id_areacode_pkey PRIMARY KEY (AreaCode)
);

CREATE TABLE fact_table
(
	Date DATE,
	ProductId INT, 
	Profit INT, 
	Sales FLOAT, 
	Margin INT, 
	COGS INT, 
	TotalExpenses INT,
	Marketing INT, 
	Inventory INT, 
	BudgetProfit INT, 
	BudgetCOGS INT, 
	BudgetMargin INT,
	BudgetSales INT,
	AreaCode INT,
	FOREIGN KEY(AreaCode) REFERENCES locations(AreaCode),
	FOREIGN KEY(ProductId) REFERENCES product(ProductId)
);


SELECT * FROM product;
SELECT * FROM locations;
SELECT * FROM fact_table;

--------------------------------------
--*				SOLUTION		    *--
--------------------------------------

-- 1. Display the number of states present in the LocationTable. 

-- SELECT 
-- 	statesname,
-- 	COUNT(statesname) states_count
-- FROM locations
-- GROUP BY statesname;

	-- possible answer should be 
	SELECT 
		COUNT(DISTINCT statesname) AS TotalStatesCount 
	FROM locations;

-- 2. How many products are of regular type?

	SELECT 
		COUNT(productname) Regular_Product_Count
	FROM
		(SELECT 
			productname
		FROM product
		WHERE usagetype = 'Regular');

-- 3. How much spending has been done on marketing of product ID 1?

	SELECT 
		SUM(marketing) as Total_spent
	FROM fact_table
		WHERE productid = 1;

-- 4. What is the minimum sales of a product?

	SELECT 
		p.productname product,
		MIN(f.sales) minimum_sales
	FROM product p
	JOIN fact_table as f
	ON p.productid = f.productid
	GROUP BY p.productname
	ORDER BY minimum_sales;

-- 5. Display the max Cost of Good Sold (COGS). 

	SELECT
		MAX(cogs) max_cogs
	FROM
		fact_table;

-- 6. Display the details of the product where product type is coffee. 

	SELECT
		*
	FROM product
	WHERE producttype = 'Coffee';

-- 7. Display the details where total expenses are greater than 40. 

	SELECT
		*
	FROM fact_table
	WHERE totalexpenses > 40;

-- 8. What is the average sales in area code 719?

	SELECT
		ROUND(AVG(sales)::numeric, 2) avg_sales_areacode719
	FROM (
			SELECT
				*
			FROM fact_table
			WHERE areacode = 719
		);

-- 9. Find out the total profit generated by Colorado state.

	SELECT 
		SUM(profit) Colorado_total_profit
	FROM fact_table 
	WHERE areacode IN (SELECT
							areacode
						FROM locations
						WHERE statesname = 'Colorado');

-- 10. Display the average inventory for each product ID.

	SELECT
		productid,
		round(AVG(inventory)::numeric,2) avg_inventory
	FROM fact_table
	GROUP BY productid
	ORDER BY productid;

-- 11. Display state in a sequential order in a Location Table. 

	SELECT statesname
	FROM locations
	ORDER BY statesname ASC;

-- 12. Display the average budget of the Product where the average budget margin should be greater than 100.

	SELECT productid, AVG(budgetsales) AS average_budget
	FROM fact_table
	WHERE budgetmargin > 100
	GROUP BY productid
	HAVING AVG(budgetmargin) > 100;

-- 13. What is the total sales done on date 2010-01-01?

	SELECT
		SUM(sales) total_sales
	FROM fact_table
		WHERE date = '2010-01-01';

-- 14. Display the average total expense of each product ID on an individual date.

	SELECT
		productid,
		SUM(totalexpenses) total_expenses
	FROM fact_table
		WHERE date = '2010-01-01'
		GROUP BY productid
		ORDER BY productid;

-- 15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.

	SELECT
		f.date,
		p.productid,
		p.producttype,
		p.productname as product,
		f.sales,
		l.statesname as state,
		f.areacode area_code	
	FROM product p
	JOIN fact_table f
	ON p.productid = f.productid
	JOIN locations l
	ON l.areacode = f.areacode
	ORDER BY p.productid;

-- 16. Display the rank without any gap to show the sales wise rank.


	-- to check the duplicates
	WITH duplicate_rows AS (
	  SELECT *, ROW_NUMBER() OVER (PARTITION BY sales) AS row_num
	  FROM fact_table
	)
	SELECT *
	FROM duplicate_rows
	WHERE row_num > 1;

	-- Here, we will use DENSE_RANK instead of RANK, because the 'sales' column have duplicate enteries

	SELECT 
		productid,
		sales, 
		DENSE_RANK() OVER (ORDER BY sales) AS DenseRank
	FROM fact_table;


-- 17. Find the state wise profit and sales.

	SELECT
		l.statesname,
		SUM(f.profit) AS total_profit,
		SUM(f.sales) AS total_sales
	FROM locations l
	JOIN fact_table f
	ON l.areacode = f.areacode
	GROUP BY l.statesname;

-- 18. Find the state wise profit and sales along with the productname.

	SELECT
		l.statesname,
		p.productname,
		SUM(f.profit) AS total_profit,
		SUM(f.sales) AS total_sales
	FROM locations l
	JOIN fact_table f
	ON l.areacode = f.areacode
	JOIN product p
	ON p.productid = f.productid
	GROUP BY l.statesname, p.productname;

-- 19. If there is an increase in sales of 5%, calculate the increasedsales.

	SELECT 
		productid,
		sales, 
	    ROUND((sales * 1.05)::numeric, 2) AS increased_sales
	FROM fact_table
	ORDER BY productid;


-- 20. Find the maximum profit along with the product ID and producttype.

	SELECT
		f.productid,
		p.producttype,
		MAX(f.profit) AS maximum_profit
	FROM product p
	JOIN fact_table f
	ON p.productid = f.productid
	GROUP BY f.productid,p.producttype
	ORDER BY maximum_profit DESC;
	
	ROLLBACK

-- 21. Create a stored procedure to fetch the result according to the product type from Product Table.

	-- Dropping in case if any Procedure already stored
	DROP IF EXISTS PROCEDURE get_table_by_product_type;
	
	CREATE OR REPLACE PROCEDURE get_table_by_product_type(IN p_type text)
	LANGUAGE plpgsql
	AS $$
	BEGIN
	    -- Fetch and return the products based on the product_type
	    PERFORM * FROM product WHERE producttype = p_type;
	    
	    -- Optional: we can use RAISE NOTICE to print the result to the console (useful for debugging)
	    -- RAISE NOTICE 'Fetching products of type: %', p_type;
	END;
	$$;
	
	-- Showing the result
	CALL get_table_by_product_type('Coffee');


-- 22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.

	SELECT 
	    totalexpenses,
	    CASE 
	        WHEN totalexpenses < 60 THEN 'Profit'
	        ELSE 'Loss'
	    END AS result
	FROM 
	    fact_table;


-- 23. Give the total weekly sales value with the date and productID details. Use roll-up to pull the data in hierarchical order.

	SELECT 
	    DATE_TRUNC('week', date) AS week_start,
	    productid,
	    SUM(sales) AS total_sales
	FROM 
	    fact_table
	GROUP BY 
	    ROLLUP(DATE_TRUNC('week', date), productid) 
	ORDER BY 
	    DATE_TRUNC('week', date), productid;

-- 24. Apply union and intersection operator on the tables which consist of attribute area code. 

	-- UNION - Returns all unique area codes from both tables.
	SELECT 
		areacode
	FROM locations
	UNION
	SELECT 
		areacode
	FROM fact_table;
	
	-- INTERSECT - Returns only the area codes that are common to both tables.
	SELECT 
		areacode
	FROM locations
	INTERSECT
	SELECT 
		areacode
	FROM fact_table;

-- 25. Create a user-defined function for the product table to fetch a particular product type based upon the userâ€™s preference. 

	CREATE OR REPLACE FUNCTION get_products_by_type(p_type text)
	-- Datatype must be similar to the columns datatypes
	RETURNS TABLE(product_id INT, product_type text, product_name text, usage_type text)
	LANGUAGE plpgsql
	AS $$
	BEGIN
	    RETURN QUERY SELECT * FROM product WHERE producttype = p_type;
	END;
	$$;
	
	-- Calling Function
	SELECT * FROM get_products_by_type('Tea');

-- 26. Change the product type from coffee to tea where productID is 1 and undo it. 

	BEGIN;
	
	UPDATE product
	SET producttype = 'Tea'
	WHERE productid = 1;
	
	-- checking the changes
	SELECT * FROM product;
	
	-- Check the changes before committing
	-- to undo, run:
	ROLLBACK;
	
	-- to commit the changes, run:
	COMMIT;

-- 27. Display the date, product ID and sales where total expenses are between 100 to 200.

	SELECT
		date,
		productid,
		sales
	FROM fact_table
	WHERE totalexpenses BETWEEN 100 AND 200;

-- 28. Delete the records in the Product Table for regular type.

	BEGIN;
	
	DELETE FROM product
	WHERE usagetype = 'Regular';
	
	-- to undo, run:
	ROLLBACK;
	
	-- to commit the changes, run:
	COMMIT;

-- 29. Display the ASCII value of the fifth character from the column Product (which is modified to 'productname').

SELECT 
    productname,
    ASCII(SUBSTRING(productname, 5, 1)) AS fifth_char_ascii
FROM 
    product;
